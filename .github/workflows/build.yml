# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v3
      id: cache_corpus
      with:
        path: ~/.conferencecorpus
        key: ${{ matrix.os }}-EventCorpus
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    - name: Install dependencies
      if: steps.pip-cache.outputs.cache-hit != 'true'
      run: |
        scripts/install
    - name: Download ConferenceCorpus
      if: steps.cache_corpus.outputs.cache-hit != 'true'
      run: python scripts/get_cc_db.py
    - name: Check Corpus
      run: ls ~/.conferencecorpus
    - name: get SMW backups of OPENRESEARCH and Clone
      run: |
        scripts/getbackup
    - name: get offline data
      run: |
        scripts/getofflinedata
    - name: Run tests
      run: |
        scripts/test
  quality:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Install pylint
        run: |
          pip install pylint
      - name: Code Quality Analysis
        run: |
          pylint kglConferenceCorpusIntro --output-format=colorized --exit-zero
  coverage:
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          scripts/install
      - name: Install coverage
        run: |
          pip install coverage
      - name: Run Coverage test
        run: |
          coverage run -m unittest discover
      - name: Test Coverage Result
        run: |
          coverage report -m